_________________2.a___________

close all;
clc;

fs = 8000;
t = 0:1/fs:2;
f1 = 9;
f2 = 6;
f3 = 7; 
A1 = 7; 
A2 = 6; 
A3 = 9;
x1 = A1*cos(2*pi*f1*t);
x2 = A2*sin(2*pi*f2*t); 
x3 = A3*cos(2*pi*f3*t);

signal = x1+x2+x3;
nx = length(t); 
plot(t, signal,'linewidth',1);
title('Time-Domain Representation of Signal');
xlabel('Time (s)');
ylabel('Amplitude');

fftSignal = fft(signal);

fftSignal = fftshift(fftSignal)/(nx/2);

f = linspace(-fs/2,fs/2,nx);

figure;
plot(f, abs(fftSignal),'linewidth',2);
title('Frequency-Domain Representation of Signal');
xlabel('Frequency (Hz)');
ylabel('Amplitude');
xlim([-20 20])

sd = 2;
noise = sd*randn(size(signal)); 
figure
plot(t,noise, 'linewidth', 1)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Representation of Noise');
fftNoise = fft(noise);
fftNoise = fftshift(fftNoise)/(nx/2);
figure
plot(f,abs(fftNoise), 'linewidth', 2)
title('Frequency-Domain Representation of Noise');
xlabel('Frequency (Hz)');
ylabel('Amplitude');
xlim([-20 20])
noisySignal = signal + noise;
figure
plot(t,noisySignal, 'linewidth', 1)
xlabel('Time (s)');
ylabel('Amplitude');
title('Time-Domain Representation of Noisy Signal');
fftNoisySignal = fft(noisySignal);
fftNoisySignal = fftshift(fftNoisySignal)/(nx/2);
figure
plot(f,abs(fftNoisySignal), 'linewidth', 2)
title('Frequency-Domain Representation of Noisy Signal');
xlabel('Frequency (Hz)');
ylabel('Amplitude');
xlim([-20 20])
______________________________________________________________
______________________________________________________________

______________________2 , b___________________________________

fs = 10000;
f1 = 9;
f2 = 6;
f3 = 7; 
A1 = 7; 
A2 = 6; 
A3 = 9;
x1 = A1*cos(2*pi*f1*t);
x2 = A2*sin(2*pi*f2*t); 
x3 = A3*cos(2*pi*f3*t);
t = 0:1/fs:0.1;
f = 10; % Times at which to sample the sine function
sig = x1+x2+x3; % Original signal, a sine wave
partition = -3.5:3.5; % Length 4, to represent 5 intervals
codebook = -4:4; % Length 5, one entry for each interval
[index,quants] = quantiz(sig,partition,codebook); % Quantize.
figure
plot(t,sig,'x',t,quants,'.') 
legend('Original signal','Quantized signal');
 ______________________________________________________________
_______________________________________________________________
___________________3a__________________________________________
close all;
clc;

fs = 8000; 
f = 400;  
A1 = 3; 
A2 = 5; 
t = 0:1/fs:1-1/fs;
A = 3.0;
a1=7;
a2=7;
powfund = A^2/2;
s = 0.23;
varnoise = s^2;
signal = A1*sin(2*pi*((a1)*100)*t ) + A2*cos(2*pi*((a2)*100)*t) + s*randn(size(t));

noise = s*randn(size(signal));

noisySignal = signal + noise;
SNR = snr(noisySignal);
defSNR = 10*log10(powfund/varnoise);


__________________________________________________________________
_____________________________________________________________________
_______________3b______________________________________________________

clc
close all
fs = 8000; 
f = 3; 
A1 = 3; 
A2 = 5; 
t = 0:1/fs:1-1/fs;
A = 2;
s = 0.23;
a1=7;
a2=7;

x = A1*sin(2*pi*((a1)*100)*t ) + A2*cos(2*pi*((a2)*100)*t) + s*randn(size(t));
ns = s*randn(size(x));
SNR = snr(x,ns);
bandwidth = obw(x,fs);
C = bandwidth*log2(1+SNR);

____________________________________________________________________
_______________________________________________________________________
_________________________________5a_________________________________________
clc
clear all
close all
time_duration = 0.2;

a = [0.4 0.6 0.8]; 
f = [5 12 20]; 
a1=4;
a2=6;
a3=5;
a4=7;
f1=13;
f2=15;
f3=9;
f4=10;
 
analog_t = 0:0.0001:time_duration;
analog_sig = a1*sin(2*pi*f1*analog_t) + a2*cos(2*pi*f2*analog_t) + a3*sin(2*pi*f3*analog_t) + a4*sin(2*pi*f4*analog_t);
 
figure
subplot(1,2,1)
plot(analog_t, analog_sig,'linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title('analog signal')
 

fs = 250;
ts = 1/fs;
 

samp_t = 0:1/fs:time_duration;
samp_sig = a(1)*sin(2*pi*f(1)*samp_t) + a(2)*cos(2*pi*f(2)*samp_t) + a(3)*sin(2*pi*f(3)*samp_t + pi/4);
 
subplot(1,2,2)
plot(samp_t, samp_sig,'o','linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title(['sampled signal for ',num2str(fs),' Hz sampling frequency'])
 

L = 8;
 

delta = (max(samp_sig) - min(samp_sig))/(L-1); % step size
quant_sig = min(samp_sig) + round((samp_sig-min(samp_sig))/delta)*delta; % quantized signal
 
figure
subplot(1,2,1)
plot(samp_t, samp_sig,'o','linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title('Kakon,khairul islam(20-42438-1)')
subtitle('sampled signal')
 
subplot(1,2,2)
plot(samp_t, quant_sig,'x','linewidth',1.5);
xlabel('time')
ylabel('amplitude')
title('Kakon,khairul islam(20-42438-1)')
subtitle('quantized samples')
 

nb = log2(L);
 

i = round((samp_sig-min(samp_sig))/delta);
dig_data_matrix = de2bi(i,nb);
dig_data = reshape(dig_data_matrix',1,[]); 
disp(['The index values for encoding from quantization of the sampled signal are: ',num2str(i)])
disp(['The converted bits from the input analog signal are: ',num2str(dig_data)])
__________________________________________________________________
